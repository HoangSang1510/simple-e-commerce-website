<div class="mt4">
    <h3>Tất cả đơn hàng</h3>

    <table id="myTable2" class="table table-striped">
        <thead>
            <tr>
                <th scope="col">STT</th>
                <th onclick="sortTable(0)" scope="col">Name</th>
                <th onclick="sortTable2(1)" scope="col">Phone</th>
                <th scope="col">Price</th>
                <th scope="col">Time</th>
                <th scope="col"></th>
            </tr>
        </thead>

        <tbody>
            {{#each order}}
                <tr>
                    <th scope="col">{{ sum @index 1}}</th>
                    <td scope="col">{{this.name}}</th>
                    <td scope="col">{{this.phone}}</th>
                    <td scope="col">{{this.cart.totalPrice}}</th>
                    <td scope="col">{{this.createdAt}}</th>
                    <td>
                        <a href="" class="btn btn-link" data-toggle="modal" data-id3= {{this._id}} data-target="#delete_order_model" >Xóa</a>
                    </td>
                </tr>
            {{/each}}
        </tbody>

    </table>
</div>

{{!-- Confirm del --}}
<div id="delete_order_model" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Xóa đơn hàng này ?</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc muốn xóa đơn hàng này ?</p>
      </div>
      <div class="modal-footer">
        <button id="button-delete-order" type="button" class="btn btn-danger">Xóa bỏ</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
      </div>
    </div>
  </div>
</div>

{{!-- image hidden form delete --}}
<form name = "delete_order_form" method="POST"></form>

{{!-- khi sự kiện DOMContentLoad đc nap vào trình duyeet (cả JQuery) thì mới thực hiện đoạn code  --}}
<script>
    
    document.addEventListener('DOMContentLoaded', function() {
        var id
        var deleteForm = document.forms["delete_order_form"]
        $('#delete_order_model').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) 
        id = button.data('id3')

  
        })

        var btnDeleteOrder = document.getElementById("button-delete-order")

        btnDeleteOrder.onclick = function(){ 
            deleteForm.action = '/admin/stored/order/' + id + '?_method=DELETE'
            deleteForm.submit()
        }        
    })
</script>


<script>
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("myTable2");
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc";
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}
</script>



<script>
function sortTable2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("myTable2");
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc";
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc") {
        if (parseInt(x.innerHTML) > parseInt(y.innerHTML)) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (parseInt(x.innerHTML) < parseInt(y.innerHTML)) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}
</script>


{{!-- date2.getTime() --}}